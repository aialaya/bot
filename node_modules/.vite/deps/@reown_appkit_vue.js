import {
  AppKit,
  AppKitAccountButton,
  AppKitButton,
  AppKitConnectButton,
  AppKitNetworkButton,
  PACKAGE_VERSION,
  ProviderUtil,
  W3mAccountActivityWidget,
  W3mAccountAuthButton,
  W3mAccountButton,
  W3mAccountDefaultWidget,
  W3mAccountNftsWidget,
  W3mAccountSettingsView,
  W3mAccountTokensWidget,
  W3mAccountView,
  W3mAccountWalletFeaturesWidget,
  W3mActivityList,
  W3mAlertBar,
  W3mAllWalletsList,
  W3mAllWalletsListItem,
  W3mAllWalletsSearch,
  W3mAllWalletsView,
  W3mAllWalletsWidget,
  W3mApproveTransactionView,
  W3mButton,
  W3mBuyInProgressView,
  W3mChooseAccountNameView,
  W3mConnectAnnouncedWidget,
  W3mConnectButton,
  W3mConnectCustomWidget,
  W3mConnectExternalWidget,
  W3mConnectFeaturedWidget,
  W3mConnectInjectedWidget,
  W3mConnectMultiChainWidget,
  W3mConnectRecentWidget,
  W3mConnectRecommendedWidget,
  W3mConnectSocialsView,
  W3mConnectView,
  W3mConnectWalletConnectWidget,
  W3mConnectWalletsView,
  W3mConnectingExternalView,
  W3mConnectingFarcasterView,
  W3mConnectingHeader,
  W3mConnectingMultiChainView,
  W3mConnectingSocialView,
  W3mConnectingWcBasicView,
  W3mConnectingWcBrowser,
  W3mConnectingWcDesktop,
  W3mConnectingWcMobile,
  W3mConnectingWcQrcode,
  W3mConnectingWcUnsupported,
  W3mConnectingWcView,
  W3mConnectingWcWeb,
  W3mConnectorList,
  W3mDownloadsView,
  W3mEmailLoginWidget,
  W3mEmailVerifyDeviceView,
  W3mEmailVerifyOtpView,
  W3mGetWalletView,
  W3mHeader,
  W3mHelpWidget,
  W3mInputAddress,
  W3mInputCurrency,
  W3mInputToken,
  W3mLegalCheckbox,
  W3mLegalFooter,
  W3mMobileDownloadLinks,
  W3mNetworkButton,
  W3mNetworkSwitchView,
  W3mNetworksView,
  W3mOnRampActivityItem,
  W3mOnRampActivityView,
  W3mOnRampProviderItem,
  W3mOnRampProvidersFooter,
  W3mOnRampProvidersView,
  W3mOnrampFiatSelectView,
  W3mOnrampTokensView,
  W3mOnrampWidget,
  W3mProfileView,
  W3mRegisterAccountNameSuccess,
  W3mRegisterAccountNameView,
  W3mRouter,
  W3mSIWXSignMessageThumbnails,
  W3mSIWXSignMessageView,
  W3mSendSelectTokenView,
  W3mSnackBar,
  W3mSocialLoginList,
  W3mSocialLoginWidget,
  W3mSwapInput,
  W3mSwapInputSkeleton,
  W3mSwapPreviewView,
  W3mSwapSelectTokenView,
  W3mSwapView,
  W3mSwitchActiveChainView,
  W3mSwitchAddressView,
  W3mTooltip,
  W3mTransactionsView,
  W3mUnsupportedChainView,
  W3mUpdateEmailPrimaryOtpView,
  W3mUpdateEmailSecondaryOtpView,
  W3mUpdateEmailWalletView,
  W3mUpgradeWalletView,
  W3mWalletCompatibleNetworksView,
  W3mWalletGuide,
  W3mWalletLoginList,
  W3mWalletReceiveView,
  W3mWalletSendDetails,
  W3mWalletSendPreviewView,
  W3mWalletSendView,
  W3mWhatIsABuyView,
  W3mWhatIsANetworkView,
  W3mWhatIsAWalletView,
  WcConstantsUtil,
  WcHelpersUtil,
  WuiSwapDetails,
  WuiTooltipTrigger
} from "./chunk-MLZY35DE.js";
import "./chunk-QYJKCDSJ.js";
import "./chunk-AIO52C65.js";
import {
  AccountController,
  ChainController,
  ConnectionController,
  CoreHelperUtil
} from "./chunk-D62FSERT.js";
import "./chunk-QYII3LA3.js";
import "./chunk-7WMCUC7N.js";
import "./chunk-DZWKJ2HW.js";
import "./chunk-LK2IVAJA.js";
import "./chunk-ODQ2TGHS.js";
import {
  onUnmounted,
  reactive,
  ref
} from "./chunk-TF6X5W6F.js";
import "./chunk-RZ55PUNP.js";

// node_modules/@reown/appkit-core/dist/esm/exports/vue.js
function useAppKitAccount() {
  const state = ref({
    address: CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) ?? null,
    caipAddress: ChainController.state.activeCaipAddress ?? null,
    status: AccountController.state.status ?? null,
    isConnected: Boolean(ChainController.state.activeCaipAddress)
  });
  const unsubscribeCaipAddress = ChainController.subscribeKey("activeCaipAddress", (val) => {
    state.value.caipAddress = val ?? null;
    state.value.address = CoreHelperUtil.getPlainAddress(val) ?? null;
    state.value.isConnected = Boolean(val);
  });
  const unsubscribeStatus = AccountController.subscribeKey("status", (val) => {
    state.value.status = val ?? null;
  });
  onUnmounted(() => {
    unsubscribeCaipAddress == null ? void 0 : unsubscribeCaipAddress();
    unsubscribeStatus == null ? void 0 : unsubscribeStatus();
  });
  return state;
}
function useDisconnect() {
  async function disconnect() {
    await ConnectionController.disconnect();
  }
  return { disconnect };
}

// node_modules/@reown/appkit/dist/esm/src/library/vue/index.js
var modal = void 0;
function getAppKit(appKit) {
  if (appKit) {
    modal = appKit;
  }
}
function useAppKitProvider(chainNamespace) {
  const state = ref(ProviderUtil.state);
  const { providers, providerIds } = state.value;
  const walletProvider = providers[chainNamespace];
  const walletProviderType = providerIds[chainNamespace];
  return {
    walletProvider,
    walletProviderType
  };
}
function useAppKitTheme() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitTheme" hook');
  }
  function setThemeMode(themeMode2) {
    if (themeMode2) {
      modal == null ? void 0 : modal.setThemeMode(themeMode2);
    }
  }
  function setThemeVariables(themeVariables2) {
    if (themeVariables2) {
      modal == null ? void 0 : modal.setThemeVariables(themeVariables2);
    }
  }
  const themeMode = ref(modal.getThemeMode());
  const themeVariables = ref(modal.getThemeVariables());
  const unsubscribe = modal == null ? void 0 : modal.subscribeTheme((state) => {
    themeMode.value = state.themeMode;
    themeVariables.value = state.themeVariables;
  });
  onUnmounted(() => {
    unsubscribe == null ? void 0 : unsubscribe();
  });
  return {
    setThemeMode,
    setThemeVariables,
    themeMode,
    themeVariables
  };
}
function useAppKit() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKit" composable');
  }
  async function open(options) {
    await (modal == null ? void 0 : modal.open(options));
  }
  async function close() {
    await (modal == null ? void 0 : modal.close());
  }
  return reactive({
    open,
    close
  });
}
function useWalletInfo() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKit" composable');
  }
  const walletInfo = ref(modal.getWalletInfo());
  const unsubscribe = modal.subscribeWalletInfo((newValue) => {
    walletInfo.value = newValue;
  });
  onUnmounted(() => {
    unsubscribe == null ? void 0 : unsubscribe();
  });
  return { walletInfo };
}
function useAppKitState() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitState" composable');
  }
  const initial = modal.getState();
  const open = ref(initial.open);
  const selectedNetworkId = ref(initial.selectedNetworkId);
  const unsubscribe = modal == null ? void 0 : modal.subscribeState((next) => {
    open.value = next.open;
    selectedNetworkId.value = next.selectedNetworkId;
  });
  onUnmounted(() => {
    unsubscribe == null ? void 0 : unsubscribe();
  });
  return reactive({ open, selectedNetworkId });
}
function useAppKitEvents() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitEvents" composable');
  }
  const event = reactive(modal.getEvent());
  const unsubscribe = modal == null ? void 0 : modal.subscribeEvents((next) => {
    event.data = next.data;
    event.timestamp = next.timestamp;
  });
  onUnmounted(() => {
    unsubscribe == null ? void 0 : unsubscribe();
  });
  return event;
}

// node_modules/@reown/appkit/dist/esm/exports/vue.js
var modal2 = void 0;
function createAppKit(options) {
  if (!modal2) {
    modal2 = new AppKit({
      ...options,
      sdkVersion: CoreHelperUtil.generateSdkVersion(options.adapters ?? [], "html", PACKAGE_VERSION)
    });
    getAppKit(modal2);
  }
  return modal2;
}
function useAppKitNetwork() {
  var _a, _b;
  const state = ref({
    caipNetwork: ChainController.state.activeCaipNetwork,
    chainId: (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.id,
    caipNetworkId: (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId,
    switchNetwork: (network) => {
      modal2 == null ? void 0 : modal2.switchNetwork(network);
    }
  });
  const unsubscribe = ChainController.subscribeKey("activeCaipNetwork", (val) => {
    state.value.caipNetwork = val;
    state.value.chainId = val == null ? void 0 : val.id;
    state.value.caipNetworkId = val == null ? void 0 : val.caipNetworkId;
  });
  onUnmounted(() => {
    unsubscribe();
  });
  return state;
}
export {
  AccountController,
  AppKit,
  AppKitAccountButton,
  AppKitButton,
  AppKitConnectButton,
  AppKitNetworkButton,
  CoreHelperUtil,
  W3mAccountActivityWidget,
  W3mAccountAuthButton,
  W3mAccountButton,
  W3mAccountDefaultWidget,
  W3mAccountNftsWidget,
  W3mAccountSettingsView,
  W3mAccountTokensWidget,
  W3mAccountView,
  W3mAccountWalletFeaturesWidget,
  W3mActivityList,
  W3mAlertBar,
  W3mAllWalletsList,
  W3mAllWalletsListItem,
  W3mAllWalletsSearch,
  W3mAllWalletsView,
  W3mAllWalletsWidget,
  W3mApproveTransactionView,
  W3mButton,
  W3mBuyInProgressView,
  W3mChooseAccountNameView,
  W3mConnectAnnouncedWidget,
  W3mConnectButton,
  W3mConnectCustomWidget,
  W3mConnectExternalWidget,
  W3mConnectFeaturedWidget,
  W3mConnectInjectedWidget,
  W3mConnectMultiChainWidget,
  W3mConnectRecentWidget,
  W3mConnectRecommendedWidget,
  W3mConnectSocialsView,
  W3mConnectView,
  W3mConnectWalletConnectWidget,
  W3mConnectWalletsView,
  W3mConnectingExternalView,
  W3mConnectingFarcasterView,
  W3mConnectingHeader,
  W3mConnectingMultiChainView,
  W3mConnectingSocialView,
  W3mConnectingWcBasicView,
  W3mConnectingWcBrowser,
  W3mConnectingWcDesktop,
  W3mConnectingWcMobile,
  W3mConnectingWcQrcode,
  W3mConnectingWcUnsupported,
  W3mConnectingWcView,
  W3mConnectingWcWeb,
  W3mConnectorList,
  W3mDownloadsView,
  W3mEmailLoginWidget,
  W3mEmailVerifyDeviceView,
  W3mEmailVerifyOtpView,
  W3mGetWalletView,
  W3mHeader,
  W3mHelpWidget,
  W3mInputAddress,
  W3mInputCurrency,
  W3mInputToken,
  W3mLegalCheckbox,
  W3mLegalFooter,
  W3mMobileDownloadLinks,
  W3mNetworkButton,
  W3mNetworkSwitchView,
  W3mNetworksView,
  W3mOnRampActivityItem,
  W3mOnRampActivityView,
  W3mOnRampProviderItem,
  W3mOnRampProvidersFooter,
  W3mOnRampProvidersView,
  W3mOnrampFiatSelectView,
  W3mOnrampTokensView,
  W3mOnrampWidget,
  W3mProfileView,
  W3mRegisterAccountNameSuccess,
  W3mRegisterAccountNameView,
  W3mRouter,
  W3mSIWXSignMessageThumbnails,
  W3mSIWXSignMessageView,
  W3mSendSelectTokenView,
  W3mSnackBar,
  W3mSocialLoginList,
  W3mSocialLoginWidget,
  W3mSwapInput,
  W3mSwapInputSkeleton,
  W3mSwapPreviewView,
  W3mSwapSelectTokenView,
  W3mSwapView,
  W3mSwitchActiveChainView,
  W3mSwitchAddressView,
  W3mTooltip,
  W3mTransactionsView,
  W3mUnsupportedChainView,
  W3mUpdateEmailPrimaryOtpView,
  W3mUpdateEmailSecondaryOtpView,
  W3mUpdateEmailWalletView,
  W3mUpgradeWalletView,
  W3mWalletCompatibleNetworksView,
  W3mWalletGuide,
  W3mWalletLoginList,
  W3mWalletReceiveView,
  W3mWalletSendDetails,
  W3mWalletSendPreviewView,
  W3mWalletSendView,
  W3mWhatIsABuyView,
  W3mWhatIsANetworkView,
  W3mWhatIsAWalletView,
  WcConstantsUtil,
  WcHelpersUtil,
  WuiSwapDetails,
  WuiTooltipTrigger,
  createAppKit,
  getAppKit,
  useAppKit,
  useAppKitAccount,
  useAppKitEvents,
  useAppKitNetwork,
  useAppKitProvider,
  useAppKitState,
  useAppKitTheme,
  useDisconnect,
  useWalletInfo
};
//# sourceMappingURL=@reown_appkit_vue.js.map
